# Copyright (c) 2024-2025, NVIDIA CORPORATION.

import os.path
import platform
from contextlib import contextmanager
from textwrap import dedent
from unittest.mock import Mock, patch

import pytest

from rapids_build_backend.impls import (
    _check_setup_py,
    _edit_pyproject,
    _get_arch,
    _get_cuda_suffix,
    _remove_rapidsai_from_config,
    _write_git_commits,
)


@contextmanager
def set_cwd(cwd):
    old_cwd = os.getcwd()
    os.chdir(cwd)
    try:
        yield
    finally:
        os.chdir(old_cwd)


def test_remove_rapidsai_from_config():
    assert _remove_rapidsai_from_config(
        {"rapidsai.disable-cuda": "true", "skbuild.build-dir": "build"}
    ) == {"skbuild.build-dir": "build"}


@pytest.mark.parametrize(
    (
        "project_name",
        "directories",
        "manifest_in_contents",
        "commit_files_config",
        "expected_commit_files",
        "expected_manifest_in",
    ),
    [
        (
            "test-project",
            ["test_project"],
            None,
            None,
            ["test_project/GIT_COMMIT"],
            "\n# Automatically generated by rapids-build-backend\n"
            "include test_project/GIT_COMMIT\n",
        ),
        (
            "test-project",
            ["_test_project"],
            None,
            ["_test_project/GIT_COMMIT"],
            ["_test_project/GIT_COMMIT"],
            "\n# Automatically generated by rapids-build-backend\n"
            "include _test_project/GIT_COMMIT\n",
        ),
        (
            "test-project",
            ["_test_project_1", "_test_project_2"],
            None,
            ["_test_project_1/GIT_COMMIT", "_test_project_2/GIT_COMMIT"],
            ["_test_project_1/GIT_COMMIT", "_test_project_2/GIT_COMMIT"],
            "\n# Automatically generated by rapids-build-backend\n"
            "include _test_project_1/GIT_COMMIT\n"
            "include _test_project_2/GIT_COMMIT\n",
        ),
        (
            "test-project",
            [],
            None,
            [],
            [],
            None,
        ),
        (
            "test-project",
            ["test_project"],
            "# Existing manifest.in file\n",
            None,
            ["test_project/GIT_COMMIT"],
            "# Existing manifest.in file\n"
            "\n# Automatically generated by rapids-build-backend\n"
            "include test_project/GIT_COMMIT\n",
        ),
    ],
)
@patch("rapids_build_backend.impls._get_git_commit", Mock(return_value="abc123"))
def test_write_git_commits(
    tmp_path,
    project_name,
    directories,
    manifest_in_contents,
    commit_files_config,
    expected_commit_files,
    expected_manifest_in,
):
    with set_cwd(tmp_path):
        for directory in directories:
            os.mkdir(directory)

        if manifest_in_contents is not None:
            with open("MANIFEST.in", "w") as f:
                f.write(manifest_in_contents)

        config = Mock(
            commit_files=commit_files_config,
        )
        with _write_git_commits(config, project_name):
            for expected_commit_file in expected_commit_files:
                with open(expected_commit_file) as f:
                    assert f.read() == "abc123\n"
            if expected_manifest_in is None:
                assert not os.path.exists("MANIFEST.in")
            else:
                with open("MANIFEST.in") as f:
                    assert f.read() == expected_manifest_in
            if not directories:
                assert list(os.walk(".")) == [(".", [], [])]

        if manifest_in_contents is not None:
            os.unlink("MANIFEST.in")
        for directory in directories:
            os.rmdir(directory)
        assert list(os.walk(".")) == [(".", [], [])]


@pytest.mark.parametrize(
    [
        "pyproject_dir",
        "dependencies_file",
        "write_dependencies_file",
        "disable_cuda",
        "cuda_version",
        "cuda_suffix",
        "cuda_python_requirement",
        "arch",
        "arch_requirement",
        "matrix",
    ],
    [
        (
            ".",
            "dependencies.yaml",
            True,
            False,
            ("12", "1"),
            "-cu12",
            "cuda-python>=12.1,<12.2.dev0",
            "x86_64",
            "some-x86-package",
            "",
        ),
        (
            ".",
            "dependencies.yaml",
            True,
            False,
            ("12", "1"),
            "-cu12",
            "cuda-python>=12.1,<12.2.dev0",
            "aarch64",
            "some-arm-package",
            "",
        ),
        (
            ".",
            "dependencies.yaml",
            False,
            False,
            ("12", "1"),
            "-cu12",
            None,
            None,  # Test the arch detection logic
            "some-x86-package"
            if platform.machine() == "x86_64"
            else "some-arm-package",
            "",
        ),
        (
            ".",
            "dependencies.yaml",
            True,
            True,
            None,  # Ensure _get_cuda_version() isn't called and unpacked
            "",
            "cuda-python",
            None,  # Test the arch detection logic
            "some-x86-package"
            if platform.machine() == "x86_64"
            else "some-arm-package",
            "",
        ),
    ],
)
def test_edit_pyproject(
    tmp_path,
    pyproject_dir,
    dependencies_file,
    write_dependencies_file,
    disable_cuda,
    cuda_version,
    cuda_suffix,
    cuda_python_requirement,
    arch,
    arch_requirement,
    matrix,
):
    original_contents = dedent(
        """\
        [project]
        name = "test-project"
        dependencies = []

        [build-system]
        requires = []
        """
    )
    full_pyproject_dir = os.path.join(tmp_path, pyproject_dir)
    if not os.path.exists(full_pyproject_dir):
        os.mkdir(full_pyproject_dir)

    with set_cwd(full_pyproject_dir):
        with open("pyproject.toml", "w") as f:
            f.write(original_contents)

        if write_dependencies_file:
            with open(dependencies_file, "w") as f:
                f.write(
                    dedent(
                        f"""\
                        files:
                          project:
                            output: pyproject
                            includes:
                              - project
                              - arch
                            pyproject_dir: {pyproject_dir}
                            matrix:
                              arch: ["x86_64"]
                            extras:
                              table: project
                          build_system:
                            output: pyproject
                            includes:
                              - build_system
                            pyproject_dir: {pyproject_dir}
                            extras:
                              table: build-system
                          other_project:
                            output: pyproject
                            includes:
                              - bad
                            pyproject_dir: python_bad
                            extras:
                              table: project
                          conda:
                            output: conda
                            includes:
                              - bad
                        dependencies:
                          project:
                            common:
                              - output_types: [pyproject]
                                packages:
                                  - tomli
                            specific:
                              - output_types: [pyproject]
                                matrices:
                                  - matrix:
                                      cuda: "12.1"
                                    packages:
                                      - cuda-python>=12.1,<12.2.dev0
                                  - matrix:
                                    packages:
                                      - cuda-python
                          build_system:
                            common:
                              - output_types: [pyproject]
                                packages:
                                  - scikit-build-core
                          arch:
                            specific:
                              - output_types: [pyproject]
                                matrices:
                                  - matrix:
                                      arch: x86_64
                                    packages:
                                      - some-x86-package
                                  - matrix:
                                      arch: aarch64
                                    packages:
                                      - some-arm-package
                          bad:
                            common:
                              - output_types: [pyproject, conda]
                                packages:
                                  - bad-package
                        """
                    )
                )
        config = Mock(
            disable_cuda=disable_cuda,
            dependencies_file=dependencies_file,
            matrix_entry=matrix,
        )

        with patch(
            "rapids_build_backend.impls._get_arch",
            Mock(return_value=arch) if arch is not None else _get_arch,
        ), patch(
            "rapids_build_backend.impls._get_cuda_version",
            Mock(return_value=cuda_version),
        ), patch(
            "rapids_build_backend.impls._get_cuda_suffix",
            _get_cuda_suffix.__wrapped__,
        ):
            if write_dependencies_file:
                with _edit_pyproject(config):
                    with open("pyproject.toml") as f:
                        assert f.read() == dedent(
                            f"""\
                            [project]
                            name = "test-project{cuda_suffix}"
                            dependencies = [
                                "{cuda_python_requirement}",
                                "{arch_requirement}",
                                "tomli",
                            ] # This list was generated by """
                            """`rapids-dependency-file-generator`. To make """
                            f"""changes, edit {dependencies_file} and run """
                            """`rapids-dependency-file-generator`.

                            [build-system]
                            requires = [
                                "scikit-build-core",
                            ] # This list was generated by """
                            """`rapids-dependency-file-generator`. To make """
                            f"""changes, edit {dependencies_file} and run """
                            """`rapids-dependency-file-generator`.
                            """
                        )
                    with open(".pyproject.toml.rapids-build-backend.bak") as f:
                        assert f.read() == original_contents
            else:
                with pytest.warns(
                    UserWarning,
                    match=rf"^File not found: '{dependencies_file}'\. If you want "
                    "rapids-build-backend to consider dependencies from a dependencies "
                    "file, supply an existing file via config setting "
                    r"'dependencies-file'\.$",
                ):
                    with _edit_pyproject(config):
                        with open("pyproject.toml") as f:
                            assert f.read() == dedent(
                                f"""\
                                [project]
                                name = "test-project{cuda_suffix}"
                                dependencies = []

                                [build-system]
                                requires = []
                                """
                            )
                        with open(".pyproject.toml.rapids-build-backend.bak") as f:
                            assert f.read() == original_contents

        with open("pyproject.toml") as f:
            assert f.read() == original_contents


@pytest.mark.parametrize(
    ("setup_py_content",),
    [
        # empty
        ("",),
        # 'setup_requires' in a comment on its own line
        (
            """
            from setuptools import setup
            # setup_requires
            setup()
            """,
        ),
    ],
)
def test_check_setup_py_works_when_setup_requires_not_passed(setup_py_content):
    assert _check_setup_py(setup_py_content) is None


@pytest.mark.parametrize(
    ("setup_py_content",),
    [
        # 'setup_requires' actually passed into setup(), on the same line
        (
            """
            from setuptools import setup
            setup(setup_requires=[])
            """,
        ),
        # 'setup_requires' actually passed into setup(), on its own line
        (
            """
            from setuptools import setup
            setup(
                setup_requires=['rmm']
            )
            """,
        ),
        # 'setup_requires' actually passed into setup(), via a dictionary
        (
            """
            from setuptools import setup
            opts = {'setup_requires': ['rmm']}
            setup(**opts)
            """,
        ),
    ],
)
def test_check_setup_py_fails_when_setup_requires_is_passed(setup_py_content):
    with pytest.raises(
        ValueError, match=r"Detected use of 'setup_requires' in a setup\.py file"
    ):
        _check_setup_py(setup_py_content)
